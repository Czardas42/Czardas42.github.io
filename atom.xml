<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Czardas42.github.io/</id>
    <title>Czardas</title>
    <updated>2021-04-30T13:41:47.156Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Czardas42.github.io/"/>
    <link rel="self" href="https://Czardas42.github.io/atom.xml"/>
    <subtitle>世界那么大，我想去看看</subtitle>
    <logo>https://Czardas42.github.io/images/avatar.png</logo>
    <icon>https://Czardas42.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Czardas</rights>
    <entry>
        <title type="html"><![CDATA[第四章 字符串]]></title>
        <id>https://Czardas42.github.io/post/chapter4/</id>
        <link href="https://Czardas42.github.io/post/chapter4/">
        </link>
        <updated>2021-04-29T06:25:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="42-字符串处理"><strong>4.2 字符串处理</strong></h1>
<h2 id="1-特殊乘法"><strong>1. 特殊乘法</strong></h2>
<h3 id="题目描述"><strong>题目描述</strong></h3>
<p>写个算法，对2个小于1000000000的输入，求结果。 特殊乘法举例：123 * <em>45 = 1<strong>4 +1</strong>5 +2<strong>4 +2</strong>5 +3**4+3</em>5</p>
<h3 id="要点"><strong>要点</strong></h3>
<ol>
<li>
<p><code>char</code>和<code>int</code>类型的转换：<code>int((str1[i]-'0')*(str2[j]-'0'))</code></p>
</li>
<li>
<p>用字符串处理数字的思路</p>
</li>
</ol>
<h3 id="提交地址">提交地址</h3>
<p><a href="https://www.nowcoder.com/practice/a5edebf0622045468436c74c3a34240f?tpId=60&amp;tqId=29490&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/a5edebf0622045468436c74c3a34240f?tpId=60&amp;tqId=29490&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码">代码</h3>
<pre><code class="language-c++">#include &lt;iostream&gt;

#include &lt;cstdio&gt;

#include &lt;string&gt;



using namespace std;



int main()

{

​    string str1, str2;

​    while(cin &gt;&gt; str1 &gt;&gt; str2)

​    {

​        int count = 0;

​        for (int i=0; i&lt;str1.size(); i++)

​        {

​            for (int j=0; j&lt;str2.size(); j++)

​            {

​                count = count + int((str1[i]-'0')*(str2[j]-'0'));

​            }

​        }

​        cout &lt;&lt; count &lt;&lt; endl;

​    }

}
</code></pre>
<h2 id="2-密码翻译"><strong>2.  密码翻译</strong></h2>
<h3 id="题目描述-2"><strong>题目描述</strong></h3>
<p>在情报传递过程中，为了防止情报被截获，往往需要对情报用一定的方式加密，简单的加密算法虽然不足以完全避免情报被破译，但仍然能防止情报被轻易的识别。我们给出一种最简的的加密方法，对给定的一个字符串，把其中从a-y,A-Y的字母用其后继字母替代，把z和Z用a和A替代，则可得到一个简单的加密字符串。</p>
<h3 id="要点-2"><strong>要点</strong></h3>
<ol>
<li>
<p>C++的if语句不可以使用连等，需要用<code>&amp;&amp;</code>分开表示：<code>if ((int('a')&lt;=num &amp;&amp; num&lt;=int('z')) || (int('A')&lt;=num &amp;&amp; num&lt;=int('Z')))</code></p>
</li>
<li>
<p>用ASCII码鉴别字符</p>
</li>
<li>
<p>强制类型转换：<code>char()</code>和<code>int()</code></p>
</li>
<li>
<p>要求整行输入，需要用到<code>getline(cin, str)</code></p>
</li>
</ol>
<h3 id="提交地址-2">提交地址：</h3>
<p><a href="https://www.nowcoder.com/practice/a5edebf0622045468436c74c3a34240f?tpId=60&amp;tqId=29490&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/a5edebf0622045468436c74c3a34240f?tpId=60&amp;tqId=29490&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-2"><strong>代码</strong></h3>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;

using namespace std;

int main()

{

​    string str;

​    while(getline(cin, str))

​    {

​        for(int i=0; i&lt;str.size(); i++)

​        {

​            int num = int(str[i]);

​            if ((int('a')&lt;=num &amp;&amp; num&lt;=int('z')) || (int('A')&lt;=num &amp;&amp; num&lt;=int('Z')))

​            {

​                if (str[i] == 'z')

​                {

​                    str[i] == 'a';

​                }

​                else if(str[i] == 'Z')

​                {

​                    str[i] == 'A';

​                }

​                else

​                {

​                    str[i] = char(int(str[i]) + 1);

​                }

​                

​            }

​        }

​        cout &lt;&lt; str &lt;&lt; endl;

​    }

}
</code></pre>
<h2 id="3-简单密码"><strong>3.  简单密码</strong></h2>
<h3 id="题目描述-3">题目描述</h3>
<p>Julius Caesar曾经使用过一种很简单的密码。 对于明文中的每个字符，将它用它字母表中后5位对应的字符来代替，这样就得到了密文。 比如字符A用F来代替。如下是密文和明文中字符的对应关系。 密文 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 明文 V W X Y Z A B C D E F G H I J K L M N O P Q R S T U 你的任务是对给定的密文进行解密得到明文。 你需要注意的是，密文中出现的字母都是大写字母。密文中也包括非字母的字符，对这些字符不用进行解码。</p>
<h3 id="要点-3"><strong>要点</strong></h3>
<p><strong>循环平移类问题</strong></p>
<p>id：差量，从零开始</p>
<p>begin：初始量</p>
<p>公式1：<code>初始量 +（id + 平移量）% 个数</code></p>
<p>公式2：<code>初始量 +（id - 平移量 + 个数）% 个数</code></p>
<p>例如本题，A-Z每个字母取其前五的字母：</p>
<pre><code>str[i] = char(int('A') + (int(str[i])-int('A')-5+26)%26);
</code></pre>
<h3 id="提交地址-3"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/ff99c43dd07f4e95a8f2f5448da3772a?tpId=61&amp;tqId=29562&amp;tPage=4&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/ff99c43dd07f4e95a8f2f5448da3772a?tpId=61&amp;tqId=29562&amp;tPage=4&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-3"><strong>代码</strong></h3>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;

using namespace std;

int main()

{

​    string str;

​    while (getline(cin, str))

​    {

​        if (str == &quot;START&quot; || str == &quot;END&quot;)

​            continue;

​        else if(str == &quot;ENDOFINPUT&quot;)

​            break;

​        else

​        {

​            for(int i=0; i&lt;str.size(); i++)

​            {

​                if (int('A') &lt;= int(str[i]) &amp;&amp; int(str[i])&lt;= int('Z'))

​                {

​                    str[i] = char(int('A') + (int(str[i])-int('A')-5+26)%26);

​                }

​            }

​            cout &lt;&lt; str &lt;&lt; endl;

​        }

​    }

}
</code></pre>
<h2 id="4-统计字符"><strong>4.  统计字符</strong></h2>
<h3 id="题目描述-4">题目描述</h3>
<p>统计一个给定字符串中指定的字符出现的次数。</p>
<h3 id="要点-4">要点</h3>
<ol>
<li>数组清零/初始化方法：（<code>cstring</code>库）</li>
</ol>
<p>​     <code>memset(number, 0, sizeof(number));</code></p>
<ol start="2">
<li>统计/计数问题思路：<strong><strong>先全部计数，再按照要求输出即可</strong></strong></li>
</ol>
<h3 id="提交地址-4">提交地址</h3>
<p><a href="https://www.nowcoder.com/practice/4ec4325634634193a7cd6798037697a8?tpId=63&amp;tqId=29574&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F9001&amp;qru=%2Fta%2Fzju-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/4ec4325634634193a7cd6798037697a8?tpId=63&amp;tqId=29574&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F9001&amp;qru=%2Fta%2Fzju-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-4">代码</h3>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
using namespace std;

int main()

{

​    string str1, str2;

​    int number[128];

​    

​    while(getline(cin, str1))

​    {

​        if (str1 == &quot;#&quot;)

​            break;

​        else

​        {

​            getline(cin, str2);

​            memset(number, 0, sizeof(number));

​            for (int i=0; i&lt;str2.size(); i++)

​            {

​                number[int(str2[i])]++;

​            }

​            for (int j=0; j&lt;str1.size(); j++)

​            {

​                

​                cout &lt;&lt; str1[j] &lt;&lt; &quot; &quot;&lt;&lt; number[int(str1[j])] &lt;&lt; endl;

​            }

​        }

​        

​    }

}
</code></pre>
<h2 id="5-字母统计"><strong>5.  字母统计</strong></h2>
<h3 id="题目描述-5"><strong>题目描述</strong></h3>
<p>输入一行字符串，计算其中A-Z大写字母出现的次数</p>
<h3 id="要点-5"><strong>要点</strong></h3>
<p>与前一题思路类似</p>
<h3 id="提交地址-5"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/de7bf0945c1c4bd1aa9d49573b831f3c?tpId=62&amp;tqId=29470&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F2002&amp;qru=%2Fta%2Fsju-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/de7bf0945c1c4bd1aa9d49573b831f3c?tpId=62&amp;tqId=29470&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F2002&amp;qru=%2Fta%2Fsju-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-5"><strong>代码</strong></h3>
<pre><code class="language-c++">#include &lt;iostream&gt;

#include &lt;cstdio&gt;

#include &lt;string&gt;

#include &lt;cstring&gt;

using namespace std;

int main()

{

​    string str;

​    int count[26];

​    while (getline(cin, str))

​    {

​        memset(count, 0, sizeof(count));

​        for (int i=0; i&lt;str.size(); i++)

​        {

​            if ('A'&lt;=str[i] &amp;&amp; str[i]&lt;='Z')

​            {

​                 count[int(str[i]-'A')]++;

​            }   

​        }   

​        for (int j=0; j&lt;26; j++)

​        {

​            cout &lt;&lt; char(int('A'+j)) &lt;&lt; &quot;:&quot; &lt;&lt; count[j] &lt;&lt; endl;

​        }

​    }

}

</code></pre>
<h2 id="6-skew数"><strong>6.  skew数</strong></h2>
<h3 id="题目描述-6"><strong>题目描述</strong></h3>
<p>在 skew binary 表示中，第 k 位的值 x[k] 表示 x[k]×(2^(k+1)-1)。每个位上的可能数字是 0 或 1，最后面一个非零位可以是 2，例如，10120(skew) = 1×(2^5-1) + 0×(2^4-1) + 1×(2^3-1) + 2×(2^2-1) + 0×(2^1-1) = 31 + 0 + 7 + 6 + 0 = 44。前十个 skew 数是 0、1、2、10、11、12、20、100、101、以及 102。</p>
<h3 id="要点-6"><strong>要点</strong></h3>
<p>次幂函数</p>
<pre><code>#include &lt;math.h&gt;
pow(a, b)
</code></pre>
<h3 id="提交地址-6"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/5928127cc6604129923346e955e75984?tpId=61&amp;tqId=29517&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/5928127cc6604129923346e955e75984?tpId=61&amp;tqId=29517&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-6"><strong>代码</strong></h3>
<pre><code class="language-C++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;math.h&gt;
using namespace std;

int main()

{

​    string str;

​    while (cin&gt;&gt;str)

​    {

​        int sum = 0;

​        for(int i=0; i&lt;str.size(); i++)

​        {

​            int id = str.size() - i;

​            sum += int(str[i] - '0') * (pow(2, id)-1);

​        }

​        cout &lt;&lt; sum &lt;&lt; endl;

​    }

}
</code></pre>
<h2 id="7-单词替换"><strong>7.  单词替换</strong></h2>
<h3 id="题目描述-7"><strong>题目描述</strong></h3>
<p>输入一个字符串，以回车结束（字符串长度&lt;=100）。该字符串由若干个单词组成，单词之间用一个空格隔开，所有单词区分大小写。现需要将其中的某个单词替换成另一个单词，并输出替换之后的字符串。</p>
<h3 id="要点-7"><strong>要点</strong></h3>
<ol>
<li><strong>坑：可能需要替换的单词是其他单词的前缀或者后缀或者中间一部分</strong></li>
</ol>
<p>​    <strong>解决方法：在句子、被替换词、替换词的前后都加上空格，保证不会产生查找错误</strong></p>
<ol start="2">
<li>
<p>查找字符串中特定字符或者子串的方法(所有位置)</p>
<pre><code class="language-C++">int position = 0;

while((position=line.find(str1,position))!=string::npos)

 {

​         //line.erase(position, str1.size());

​         //line.insert(position, str2);

​         line.replace(position,str1.length(),str2);

​         position++;

}
</code></pre>
</li>
<li>
<p>string类型基本操作</p>
</li>
</ol>
<pre><code>erase(起始位置，长度)
insert(起始位置，长度)
replace(起始位置，长度，替换结果)
substr(起始位置，长度)
</code></pre>
<h3 id="提交地址-7"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/5b58a04679d5419caf62c2b238e5c9c7?tpId=61&amp;tqId=29518&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/5b58a04679d5419caf62c2b238e5c9c7?tpId=61&amp;tqId=29518&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-7"><strong>代码</strong></h3>
<pre><code class="language-C++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;

using namespace std;

int main()

{

​    string line;

​    while (getline(cin, line))

​    {

​        line = line;

​        string str1, str2;

​        cin &gt;&gt; str1 &gt;&gt; str2;

​        line = ' ' + line + ' ';

​        str1 = ' ' + str1 + ' ';

​        str2 = ' ' + str2 + ' ';

​        

​        int position = 0;

​        while((position=line.find(str1,position))!=string::npos)

​        {

​            //line.erase(position, str1.size());

​            //line.insert(position, str2);

​            line.replace(position,str1.length(),str2);

​            position++;

​        }

​        

​        cout &lt;&lt; line.substr(1, line.size()-2) &lt;&lt; endl;

​    }

}
</code></pre>
<h2 id="8-首字母大写"><strong>8.  首字母大写</strong></h2>
<h3 id="题目描述-8"><strong>题目描述</strong></h3>
<p>对一个字符串中的所有单词，如果单词的首字母不是大写字母，则把单词的首字母变成大写字母。 在字符串中，单词之间通过空白符分隔，空白符包括：空格(' ')、制表符('\t')、回车符('\r')、换行符('\n')。</p>
<h3 id="要点-8"><strong>要点</strong></h3>
<p>句首和其他位置要分开讨论</p>
<p>其他位置可以根据空白符确定</p>
<h3 id="提交地址-8"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/91f9c70e7b6f4c0ab23744055632467a?tpId=61&amp;tqId=29529&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/91f9c70e7b6f4c0ab23744055632467a?tpId=61&amp;tqId=29529&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F1002&amp;qru=%2Fta%2Fpku-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-8"><strong>代码</strong></h3>
<pre><code class="language-C++">#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;

int main(){

​    string s;

​    getline(cin,s);

​    for(int i=0;i&lt;s.length();i++){

​        if(i==0)

​            s[i]=toupper(s[i]);

​        else{

​            if(s[i-1]==' '||s[i-1]=='\t'||s[i-1]=='\r'||s[i-1]=='\n')

​                s[i]=toupper(s[i]);

​        }

​    }

​    cout&lt;&lt;s&lt;&lt;endl;

}
</code></pre>
<h2 id="9-浮点数加法"><strong>9.  浮点数加法</strong></h2>
<h3 id="题目描述-9"><strong>题目描述</strong></h3>
<p>对求2个浮点数相加的和 题目中输入输出中出现浮点数都有如下的形式： P1P2...Pi.Q1Q2...Qj 对于整数部分，P1P2...Pi是一个非负整数 对于小数部分，Qj不等于0</p>
<h3 id="要点-9"><strong>要点</strong></h3>
<ol>
<li>
<p><strong>整数和小数部分位数均可能不相等，所以都需要需要补0，可以分开操作</strong></p>
</li>
<li>
<p>绝对值函数：<code>#include &lt;cmath&gt;</code>  <code>int c = abs(a + b)</code></p>
</li>
<li>
<p>加法进位操作</p>
<p>变量：两个加数，加数结果（中间变量），一个位结果，一个进位变量</p>
<pre><code class="language-C++">int add = int((str1[i]-'0') + (str2[i]-'0'));
result[i] = char('0' + (add + temp)%10);    
temp = (add + temp)/10;
</code></pre>
</li>
</ol>
<h3 id="提交地址-9"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/ddec753f446e4ba4944e35378ba635c8?tpId=40&amp;rp=1&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/ddec753f446e4ba4944e35378ba635c8?tpId=40&amp;rp=1&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-9"><strong>代码</strong></h3>
<pre><code class="language-C++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cmath&gt;
using namespace std;

int main()
{
    string str1, str2;
    while(cin &gt;&gt; str1)
    {
        cin &gt;&gt; str2;
        int flag1 = str1.find('.') + 1; //str1整数长度
        int flag11 = str1.size() - flag1; //str1小数长度
        int flag2 = str2.find('.') + 1;
        int flag22 = str2.size() - flag2;
        int time1 = abs(flag1 - flag2); //str1和str2整数部分差值
        int time2 = abs(flag11 - flag22); //str1和str2小数部分差值
        //整数部分补0
        if (flag1 &gt; flag2)
        {
            for(int i=0; i&lt;time1; i++)
                str2 = '0' + str2;
        }
        else
        {
            for(int i=0; i&lt;time1; i++)
                str1 = '0' + str1;
        }
        //小数部分补0
        if (flag11 &gt; flag22)
        {
            for(int i=0; i&lt;time2; i++)
                str2 = str2 + '0';
        }
        else
        {
            for(int i=0; i&lt;time2; i++)
                str1 = str1 + '0';
        }
        //预存结果格式
        //注意：此处并没有考虑最高位进位的问题，用例中也没有出现
        string result = str1;
        int temp = 0;
        for (int i=str1.size()-1; i&gt;=0; i--)
        {
            if (str1[i] != '.')
            {   //经典加法操作
                int add = int((str1[i]-'0') + (str2[i]-'0'));
                result[i] = char('0' + (add + temp)%10);    
                temp = (add + temp)/10;
            }
        }
        cout &lt;&lt; result &lt;&lt; endl;
    }
}
</code></pre>
<h2 id="10-后缀字串排序"><strong>10.  后缀字串排序</strong></h2>
<h3 id="题目描述-10"><strong>题目描述</strong></h3>
<p>对于一个字符串，将其后缀子串进行排序，例如grain 其子串有： grain rain ain in n 然后对各子串按字典顺序排序，即： ain,grain,in,n,rain</p>
<h3 id="要点-10"><strong>要点</strong></h3>
<ol>
<li>
<p>两个步骤：得到所有后缀子串，排序输出</p>
</li>
<li>
<p><strong>得到所有后缀子串方法</strong></p>
<p>使用<code>str.substr(起始位, 长度)</code>函数</p>
<p>从单词最后一位开始遍历，同时增加长度</p>
</li>
<li>
<p><strong>排序函数</strong></p>
<p><code>void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);</code></p>
<p>（1）第一个参数first：是要排序的数组的起始地址。</p>
<p>（2）第二个参数last：是结束的地址（<strong>最后一个数据的后一个数据的地址</strong>）</p>
<p>（3）第三个参数comp是排序的方法：可以是从升序也可是降序。如果第三个参数不写，则默认的排序方法是从小到大排序。降序：<code>cmp</code>。</p>
</li>
</ol>
<h3 id="提交地址-10"><strong>提交地址</strong></h3>
<p><a href="https://www.nowcoder.com/practice/f89f96ea3145418b8e6c3eb75773f65a?tpId=40&amp;rp=1&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/f89f96ea3145418b8e6c3eb75773f65a?tpId=40&amp;rp=1&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p>
<h3 id="代码-10"><strong>代码</strong></h3>
<pre><code class="language-C++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
using namespace std;

int main()
{
    string str;
    while(cin &gt;&gt; str)
    {
        string sub[50];//50对于用例够了
        //得到后缀子串
        for (int i=str.size()-1, j=1; i&gt;=0; i--, j++)
        {
            sub[i] = str.substr(i,j);
        }
        //排序
        sort(sub, sub+str.size());//记住！！！！！
        for (int i=0; i&lt;str.size(); i++)
            cout &lt;&lt; sub[i] &lt;&lt; endl;
    }
    
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云计算大作业知识点]]></title>
        <id>https://Czardas42.github.io/post/openfaas_project_notes/</id>
        <link href="https://Czardas42.github.io/post/openfaas_project_notes/">
        </link>
        <updated>2021-04-29T03:53:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-kubernetes">1. Kubernetes</h1>
<h2 id="11-架构节点工作负载">1.1 架构(节点)，工作负载</h2>
<h3 id="nodes">nodes：</h3>
<p><a href="https://kubernetes.io/zh/docs/concepts/architecture/nodes/">https://kubernetes.io/zh/docs/concepts/architecture/nodes/</a><br>
</br></p>
<h3 id="pods">Pods：</h3>
<p>Pod 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。<br>
<a href="https://kubernetes.io/zh/docs/concepts/workloads/">https://kubernetes.io/zh/docs/concepts/workloads/</a><br>
</br></p>
<h2 id="12-服务-负载均衡和联网">1.2 服务、负载均衡和联网</h2>
<h3 id="使用-service-连接到应用">使用 Service 连接到应用:</h3>
<p><strong>可结合Prometheus部署过程进行阐述</strong><br>
<a href="https://kubernetes.io/zh/docs/concepts/services-networking/connect-applications-service/">https://kubernetes.io/zh/docs/concepts/services-networking/connect-applications-service/</a></p>
<h3 id="用-kubectl-扩缩应用程序deployment副本数">用 kubectl 扩缩应用程序(Deployment副本数)：</h3>
<p><strong>可结合正确删除pod的方法进行阐述</strong><br>
在之前的模块中，我们创建了一个 Deployment，然后通过 Service让其可以开放访问。Deployment 仅为跑这个应用程序创建了一个 Pod。 当流量增加时，我们需要扩容应用程序满足用户需求。<br>
<a href="https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/scale/scale-intro/">https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/scale/scale-intro/</a></p>
<p></br></br></p>
<h1 id="2-openfaas">2. OpenFaaS</h1>
<h2 id="21-layers-and-responsibilities-工作流程">2.1 Layers and responsibilities 工作流程</h2>
<p><a href="https://docs.openfaas.com/architecture/stack/#openfaas-stack">https://docs.openfaas.com/architecture/stack/#openfaas-stack</a><br>
</br></p>
<h2 id="22-架构gateway">2.2 架构&amp;Gateway</h2>
<p><a href="https://docs.openfaas.com/architecture/gateway/">https://docs.openfaas.com/architecture/gateway/</a><br>
</br></p>
<h2 id="23-watchdog工作原理-函数请求处理流程详解">2.3 Watchdog工作原理&amp; 函数请求处理流程详解</h2>
<p><a href="https://docs.openfaas.com/architecture/watchdog/">https://docs.openfaas.com/architecture/watchdog/</a><br>
<a href="https://blog.csdn.net/weixin_38616705/article/details/107385293">https://blog.csdn.net/weixin_38616705/article/details/107385293</a><br>
</br></p>
<h2 id="24-自动缩放工作原理冷启动43">2.4 自动缩放工作原理&amp;冷启动（4.3）</h2>
<p><a href="https://docs.openfaas.com/architecture/autoscaling/">https://docs.openfaas.com/architecture/autoscaling/</a></p>
<p></br></br></p>
<h1 id="3-prometheusgrafana">3. Prometheus&amp;Grafana</h1>
<h2 id="31-yml文件配置结合prometheus配置过程">3.1 yml文件配置(结合Prometheus配置过程)</h2>
<p><a href="https://blog.csdn.net/weixin_29278805/article/details/112493314?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_29278805/article/details/112493314?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a><br>
</br></p>
<h2 id="32-promql语法以及实验使用示例">3.2 PromQL语法以及实验使用示例</h2>
<p>Prometheus内置的数据查询语言，其提供对时间序列数据丰富的查询，聚合以及逻辑运算能力的支持。并且被广泛应用在Prometheus的日常应用当中，包括对数据查询、可视化、告警处理当中。<br>
<a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-query-language">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-query-language</a><br>
</br></br></p>
<h1 id="4-实验">4. 实验</h1>
<h2 id="41-控制变量-相关性">4.1 控制变量 &amp; 相关性</h2>
<h2 id="42-压力测试">4.2 压力测试</h2>
<h2 id="43-冷热启动">4.3 冷热启动</h2>
<p></br></br></p>
<h1 id="5-其他">5. 其他</h1>
<h2 id="51-vpc对等连接涉及计网相关知识">5.1 VPC对等连接(涉及计网相关知识)</h2>
<p>对等连接(peer-to-peer，简写为 P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。<br>
只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。<br>
<a href="https://support.huaweicloud.com/usermanual-vpc/vpc_peering_0000.html">https://support.huaweicloud.com/usermanual-vpc/vpc_peering_0000.html</a><br>
<a href="https://www.cnblogs.com/liuawen/p/11930142.html#2_134">https://www.cnblogs.com/liuawen/p/11930142.html#2_134</a><br>
<a href="https://www.nowcoder.com/questionTerminal/f14684caf72042a2a747f5d7df32670b">https://www.nowcoder.com/questionTerminal/f14684caf72042a2a747f5d7df32670b</a><br>
</br></br></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[可信计算]]></title>
        <id>https://Czardas42.github.io/post/Trusted_Computing/</id>
        <link href="https://Czardas42.github.io/post/Trusted_Computing/">
        </link>
        <updated>2021-04-29T02:29:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安全含义">安全含义</h1>
<p>CIA：机密， 完整，可用<br>
在信息安全等级保护工作中，根据信息系统的机密性（Confidentiality）、完整性（Integrity）、可用性（Availability）来划分信息系统的安全等级，三个性质简称CIA</p>
<h1 id="信息安全五性">信息安全五性：</h1>
<p>事前可验证性<br>
事后不可否认性<br>
CIA</p>
<h1 id="可信-约等于-安全-可靠">可信 约等于 安全 + 可靠</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021.04.27：K8s 性能测试]]></title>
        <id>https://Czardas42.github.io/post/20210427_ks8_openfaas_test/</id>
        <link href="https://Czardas42.github.io/post/20210427_ks8_openfaas_test/">
        </link>
        <updated>2021-04-27T12:50:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-分布式负载测试web测试应用的pod负载变化">1. 分布式负载测试：web测试应用的pod负载变化</h2>
<p><strong>准备</strong></p>
<h3 id="a-部署web应用">a. 部署Web应用</h3>
<h3 id="b-部署locust测试工具">b. 部署Locust（测试工具）</h3>
<h3 id="c-配置traefik监控-可用prometheus">c. 配置Traefik（监控） 可用Prometheus</h3>
<p></br></br><br>
<strong>测试方法</strong><br>
打开<a href="http://traefik.locust.io">http://traefik.locust.io</a>页面，点击Edit输入伪造的用户数和用户每秒发送的请求个数，点击Start Swarming就可以开始测试了。</p>
<p>在测试过程中调整sample-webapp的pod个数（默认设置了1个pod），观察pod的负载变化情况。<br>
从一段时间的观察中可以看到负载被平均分配给了3个pod.<br>
在locust的页面中可以实时观察也可以下载测试结果。</p>
<p></br></br><br>
<strong>【参考】</strong><br>
<a href="https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/distributed-load-test.html">https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/distributed-load-test.html</a><br>
</br></br></p>
<h2 id="2-网络延迟测试通过不同方式访问web测试应用">2. 网络延迟测试：通过不同方式访问web测试应用</h2>
<p><strong>测试场景</strong><br>
场景一、 Kubernetes集群node节点上通过Cluster IP访问sample-webapp<br>
场景二、Kubernetes集群内部通过service访问sample-webapp<br>
场景三、在公网上通过traefik ingress访问sample-webapp<br>
</br></br><br>
<strong>测试结果</strong><br>
在这三种场景下的响应时间测试结果如下：<br>
Kubernetes集群node节点上通过Cluster IP方式访问：2ms<br>
Kubernetes集群内部通过service访问：6ms<br>
Kubernetes集群外部通过traefik ingress暴露的地址访问：110ms<br>
注意：执行测试的node节点/Pod与serivce所在的pod的距离（是否在同一台主机上），对前两个场景可以能会有一定影响。<br>
</br></br><br>
<strong>【参考】</strong><br>
<a href="https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/network-and-cluster-perfermance-test.html">https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/network-and-cluster-perfermance-test.html</a><br>
</br></br></p>
<h2 id="3-网络性能测试暂时不考虑">3. 网络性能测试(暂时不考虑)</h2>
<p>网络使用flannel的vxlan模式。<br>
使用iperf进行测试。</p>
<p>使用Flannel的vxlan模式实现每个pod一个IP的方式，会比宿主机直接互联的网络性能损耗30%～40%，符合网上流传的测试结论。而flannel的host-gw模式比起宿主机互连的网络性能损耗大约是10%。</p>
<p>Vxlan会有一个封包解包的过程，所以会对网络性能造成较大的损耗，而host-gw模式是直接使用路由信息，网络损耗小。<br>
<strong>【参考】</strong><br>
<a href="https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/network-and-cluster-perfermance-test.html">https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/network-and-cluster-perfermance-test.html</a><br>
</br></br></p>
<h2 id="4-不同type的资源类型api请求耗时分布测试暂时不考虑">4. 不同type的资源类型API请求耗时分布测试(暂时不考虑)</h2>
</br>
**【参考】**
<https://www.ctolib.com/docs/sfile/kubernetes-handbook/practice/network-and-cluster-perfermance-test.html>
<https://supereagle.github.io/2017/03/09/kubemark/>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021.04.27：Grafana监控平台部署（对于K8s集群各节点）]]></title>
        <id>https://Czardas42.github.io/post/20210427_grafana/</id>
        <link href="https://Czardas42.github.io/post/20210427_grafana/">
        </link>
        <updated>2021-04-27T03:26:39.000Z</updated>
        <content type="html"><![CDATA[<p><strong>监控内容：各节点CPU使用率、磁盘、内存、磁盘IO读写、网络IO速率</strong><br>
</br></br><br>
<strong>监控平台截图：</strong><br>
<img src="https://Czardas42.github.io//post-images/1619580572559.jpg" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://Czardas42.github.io//post-images/1619580593621.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://Czardas42.github.io//post-images/1619580606902.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://Czardas42.github.io//post-images/1619580616167.jpg" alt="" loading="lazy"></figure>
<p><img src="https://Czardas42.github.io//post-images/1619580630042.jpg" alt="" loading="lazy"><br>
</br></br><br>
<strong>对应JSON文件如下：</strong></p>
<pre><code>{
  &quot;__inputs&quot;: [
    {
      &quot;name&quot;: &quot;DS_FAAS&quot;,
      &quot;label&quot;: &quot;faas&quot;,
      &quot;description&quot;: &quot;&quot;,
      &quot;type&quot;: &quot;datasource&quot;,
      &quot;pluginId&quot;: &quot;prometheus&quot;,
      &quot;pluginName&quot;: &quot;Prometheus&quot;
    }
  ],
  &quot;__requires&quot;: [
    {
      &quot;type&quot;: &quot;grafana&quot;,
      &quot;id&quot;: &quot;grafana&quot;,
      &quot;name&quot;: &quot;Grafana&quot;,
      &quot;version&quot;: &quot;4.6.3&quot;
    },
    {
      &quot;type&quot;: &quot;panel&quot;,
      &quot;id&quot;: &quot;graph&quot;,
      &quot;name&quot;: &quot;Graph&quot;,
      &quot;version&quot;: &quot;&quot;
    },
    {
      &quot;type&quot;: &quot;datasource&quot;,
      &quot;id&quot;: &quot;prometheus&quot;,
      &quot;name&quot;: &quot;Prometheus&quot;,
      &quot;version&quot;: &quot;1.0.0&quot;
    }
  ],
  &quot;annotations&quot;: {
    &quot;list&quot;: [
      {
        &quot;builtIn&quot;: 1,
        &quot;datasource&quot;: &quot;-- Grafana --&quot;,
        &quot;enable&quot;: true,
        &quot;hide&quot;: true,
        &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;,
        &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;,
        &quot;type&quot;: &quot;dashboard&quot;
      }
    ]
  },
  &quot;editable&quot;: true,
  &quot;gnetId&quot;: null,
  &quot;graphTooltip&quot;: 0,
  &quot;hideControls&quot;: false,
  &quot;id&quot;: null,
  &quot;links&quot;: [],
  &quot;rows&quot;: [
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: &quot;250px&quot;,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: true,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 11,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 4,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\&quot;idle\&quot;, job=\&quot;master_node_exporter_metrics\&quot;}[5m])) * 100) &quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Master CPU使用率&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        },
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: true,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 13,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 4,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\&quot;idle\&quot;, job=\&quot;slave-0001_node_exporter_metrics\&quot;}[5m])) * 100) &quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Slave-0001 CPU使用率&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        },
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: true,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 14,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 4,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\&quot;idle\&quot;, job=\&quot;slave-0002_node_exporter_metrics\&quot;}[5m])) * 100) &quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Slave-0002 CPU使用率&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 2,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 6,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;(node_filesystem_size_bytes{fstype=~\&quot;xfs|ext4\&quot;} - node_filesystem_free_bytes) / node_filesystem_size_bytes&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;各节点磁盘使用率&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;transparent&quot;: false,
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        },
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;hideTimeOverride&quot;: false,
          &quot;id&quot;: 1,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 6,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;各节点内存使用率&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 278,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 4,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 2,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 6,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_disk_read_bytes_total{}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;各节点磁盘IO读速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        },
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 3,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 6,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_disk_written_bytes_total{}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;各节点磁盘IO写速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 6,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: true,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 12,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_network_transmit_bytes_total{job=\&quot;master_node_exporter_metrics\&quot;}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Master 网络IO速率:出速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 5,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: true,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 12,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_network_receive_bytes_total{job=\&quot;master_node_exporter_metrics\&quot;}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Master 网络IO速率:入速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 7,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: true,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 12,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_network_receive_bytes_total{job=\&quot;slave-0001_node_exporter_metrics\&quot;}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Slave-0001 网络IO速率:入速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 8,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: true,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 12,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_network_transmit_bytes_total{job=\&quot;slave-0001_node_exporter_metrics\&quot;}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Slave-0001 网络IO速率:出速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 9,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: true,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 12,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_network_receive_bytes_total{job=\&quot;slave-0002_node_exporter_metrics\&quot;}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Slave-0002 网络IO速率:入速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [
        {
          &quot;aliasColors&quot;: {},
          &quot;bars&quot;: false,
          &quot;dashLength&quot;: 10,
          &quot;dashes&quot;: false,
          &quot;datasource&quot;: &quot;${DS_FAAS}&quot;,
          &quot;fill&quot;: 1,
          &quot;id&quot;: 10,
          &quot;legend&quot;: {
            &quot;alignAsTable&quot;: true,
            &quot;avg&quot;: false,
            &quot;current&quot;: false,
            &quot;max&quot;: false,
            &quot;min&quot;: false,
            &quot;rightSide&quot;: true,
            &quot;show&quot;: true,
            &quot;total&quot;: false,
            &quot;values&quot;: false
          },
          &quot;lines&quot;: true,
          &quot;linewidth&quot;: 1,
          &quot;links&quot;: [],
          &quot;nullPointMode&quot;: &quot;null&quot;,
          &quot;percentage&quot;: false,
          &quot;pointradius&quot;: 5,
          &quot;points&quot;: false,
          &quot;renderer&quot;: &quot;flot&quot;,
          &quot;seriesOverrides&quot;: [],
          &quot;spaceLength&quot;: 10,
          &quot;span&quot;: 12,
          &quot;stack&quot;: false,
          &quot;steppedLine&quot;: false,
          &quot;targets&quot;: [
            {
              &quot;expr&quot;: &quot;irate(node_network_transmit_bytes_total{job=\&quot;slave-0002_node_exporter_metrics\&quot;}[5m]) / 1024 / 1024&quot;,
              &quot;format&quot;: &quot;time_series&quot;,
              &quot;intervalFactor&quot;: 2,
              &quot;refId&quot;: &quot;A&quot;
            }
          ],
          &quot;thresholds&quot;: [],
          &quot;timeFrom&quot;: &quot;1h&quot;,
          &quot;timeShift&quot;: null,
          &quot;title&quot;: &quot;Slave-0002 网络IO速率:出速率(MiB/s)&quot;,
          &quot;tooltip&quot;: {
            &quot;shared&quot;: true,
            &quot;sort&quot;: 0,
            &quot;value_type&quot;: &quot;individual&quot;
          },
          &quot;type&quot;: &quot;graph&quot;,
          &quot;xaxis&quot;: {
            &quot;buckets&quot;: null,
            &quot;mode&quot;: &quot;time&quot;,
            &quot;name&quot;: null,
            &quot;show&quot;: true,
            &quot;values&quot;: []
          },
          &quot;yaxes&quot;: [
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            },
            {
              &quot;format&quot;: &quot;short&quot;,
              &quot;label&quot;: null,
              &quot;logBase&quot;: 1,
              &quot;max&quot;: null,
              &quot;min&quot;: null,
              &quot;show&quot;: true
            }
          ]
        }
      ],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    },
    {
      &quot;collapse&quot;: false,
      &quot;height&quot;: 250,
      &quot;panels&quot;: [],
      &quot;repeat&quot;: null,
      &quot;repeatIteration&quot;: null,
      &quot;repeatRowId&quot;: null,
      &quot;showTitle&quot;: false,
      &quot;title&quot;: &quot;Dashboard Row&quot;,
      &quot;titleSize&quot;: &quot;h6&quot;
    }
  ],
  &quot;schemaVersion&quot;: 14,
  &quot;style&quot;: &quot;dark&quot;,
  &quot;tags&quot;: [],
  &quot;templating&quot;: {
    &quot;list&quot;: []
  },
  &quot;time&quot;: {
    &quot;from&quot;: &quot;now-6h&quot;,
    &quot;to&quot;: &quot;now&quot;
  },
  &quot;timepicker&quot;: {
    &quot;refresh_intervals&quot;: [
      &quot;5s&quot;,
      &quot;10s&quot;,
      &quot;30s&quot;,
      &quot;1m&quot;,
      &quot;5m&quot;,
      &quot;15m&quot;,
      &quot;30m&quot;,
      &quot;1h&quot;,
      &quot;2h&quot;,
      &quot;1d&quot;
    ],
    &quot;time_options&quot;: [
      &quot;5m&quot;,
      &quot;15m&quot;,
      &quot;1h&quot;,
      &quot;6h&quot;,
      &quot;12h&quot;,
      &quot;24h&quot;,
      &quot;2d&quot;,
      &quot;7d&quot;,
      &quot;30d&quot;
    ]
  },
  &quot;timezone&quot;: &quot;&quot;,
  &quot;title&quot;: &quot;Kubernetes&quot;,
  &quot;version&quot;: 7
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021.04.26：Kubernetes安装踩坑记录]]></title>
        <id>https://Czardas42.github.io/post/20210426_kubernetes/</id>
        <link href="https://Czardas42.github.io/post/20210426_kubernetes/">
        </link>
        <updated>2021-04-26T08:30:35.000Z</updated>
        <content type="html"><![CDATA[<p>🤡🤡🤡🤡🤡🤡</p>
<h3 id="1-error-kubeletversionthe-kubelet-version-is-higher-than-the-control-plane-version-this-is-not-a-supportted-version-skew-and-may-lead-to-a-malfunctional-cluster">1. 【ERROR KubeletVersion】：the kubelet version is higher than the control plane version. This is not a supportted version skew and may lead to a malfunctional cluster.</h3>
<figure data-type="image" tabindex="1"><img src="https://Czardas42.github.io//post-images/1619426268228.jpg" alt="" loading="lazy"></figure>
<p>版本不匹配的问题，需要重新安装 kubelet kubeadm kubectl(与Kubernetes版本一致)</p>
<p>Kubernetes版本：<br>
<img src="https://Czardas42.github.io//post-images/1619426325673.png" alt="" loading="lazy"></p>
<p><strong>【解决方法】</strong></p>
<pre><code>yum -y remove kubelet kubeadm kubectl
yum -y install kubelet-1.20.5 kubeadm-1.20.5 kubectl-1.20.5
</code></pre>
<p>【参考】<br>
<a href="https://www.cnblogs.com/siren27/p/10211920.html">https://www.cnblogs.com/siren27/p/10211920.html</a></p>
<p><br/><br/></p>
<h3 id="2-解决安装k8s时flannel镜像拉取失败的问题">2. 解决安装K8S时flannel镜像拉取失败的问题</h3>
<figure data-type="image" tabindex="2"><img src="https://Czardas42.github.io//post-images/1619425933210.jpg" alt="" loading="lazy"></figure>
<p><strong>【解决方法】</strong></p>
<pre><code>curl -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sed -i 's/quay.io\/coreos/registry.cn-beijing.aliyuncs.com\/imcto/g' kube-flannel.yml
docker pull registry.cn-hangzhou.aliyuncs.com/k8sos/flannel:v0.13.1-rc2
</code></pre>
<pre><code>vim kube-flannel.yml
</code></pre>
<p><strong>修改kube-flannel.yml将里面使用的官方镜像的名字改为自己拉取的镜像名称</strong><br>
即：image: registry.cn-hangzhou.aliyuncs.com/k8sos/flannel:v0.13.1-rc2</p>
<p><strong>安装flannel</strong></p>
<pre><code>kubectl apply -f kube-flannel.yml
</code></pre>
<p>【参考】<br>
<a href="https://blog.csdn.net/telundusiji/article/details/114033799">https://blog.csdn.net/telundusiji/article/details/114033799</a></p>
<p><br/><br/></p>
<h3 id="3-unable-to-connect-to-the-server-x509-certificate-signed-by-unknown-authority">3. Unable to connect to the server: x509: certificate signed by unknown authority</h3>
<p><strong>【解决方法】</strong></p>
<p>原因在于<code>kubeadm init</code>命令之后的执行三条命令：</p>
<pre><code>mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre>
<p>这几个命令会创建一个目录，并复制几个配置文件，重新创建集群时，<strong>这个目录还是存在的</strong>，需要在执行这几个命令前先执行<code>rm -rf $HOME/.kube</code>命令删除这个目录，最后解决了这个问题</p>
<p><strong>正确操作：</strong></p>
<pre><code>kubeadm reset
rm -rf $HOME/.kube
</code></pre>
<p><strong>然后再进行init：</strong><br>
<code>kubeadm init --config kubeadm.yaml --ignore-preflight-errors=Swap</code><br>
或者<br>
<code>kubeadm init --kubernetes-version=v1.20.5 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --ignore-preflight-errors=Swap</code></p>
<p>【参考】<br>
<a href="https://blog.csdn.net/woay2008/article/details/93250137">https://blog.csdn.net/woay2008/article/details/93250137</a><br>
<a href="https://blog.csdn.net/curry10086/article/details/107579113?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/curry10086/article/details/107579113?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p>
<p><br/><br/></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写在最前面]]></title>
        <id>https://Czardas42.github.io/post/at_first/</id>
        <link href="https://Czardas42.github.io/post/at_first/">
        </link>
        <updated>2021-04-26T03:22:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="have-a-try">have a try😀😀😀</h1>
]]></content>
    </entry>
</feed>